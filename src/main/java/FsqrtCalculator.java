package cpuex4;

import cpuex4.FPUUtils.*;

public class FsqrtCalculator {

    static int[] tb_sqrt_val = {1,16369,32705,49010,65282,81525,97735,113915,130064,146183,162271,178329,194357,210355,226324,242263,258172,274051,289903,305725,321519,337284,353020,368728,384408,400061,415685,431282,446850,462392,477907,493394,508854,524288,539695,555075,570429,585757,601059,616334,631584,646808,662006,677179,692327,707449,722546,737618,752666,767688,782686,797660,812609,827534,842435,857312,872165,886994,901799,916581,931339,946074,960786,975475,990141,1004784,1019404,1034001,1048576,1063128,1077658,1092166,1106652,1121115,1135556,1149976,1164374,1178750,1193105,1207438,1221750,1236040,1250310,1264558,1278785,1292991,1307177,1321342,1335486,1349609,1363713,1377795,1391858,1405900,1419922,1433925,1447907,1461869,1475812,1489735,1503638,1517522,1531386,1545232,1559057,1572864,1586652,1600420,1614170,1627900,1641612,1655305,1668980,1682636,1696273,1709892,1723493,1737075,1750639,1764185,1777714,1791224,1804716,1818190,1831647,1845085,1858507,1871910,1885297,1898665,1912017,1925351,1938668,1951968,1965250,1978516,1991765,2004997,2018212,2031410,2044591,2057756,2070905,2084037,2097152,2110251,2123334,2136400,2149450,2162484,2175502,2188504,2201490,2214461,2227415,2240353,2253276,2266183,2279075,2291951,2304811,2317656,2330485,2343300,2356099,2368882,2381651,2394404,2407143,2419866,2432574,2445268,2457946,2470610,2483259,2495894,2508513,2521119,2533709,2546285,2558847,2571394,2583927,2596446,2608950,2621440,2633916,2646378,2658826,2671259,2683679,2696085,2708477,2720856,2733220,2745571,2757908,2770231,2782541,2794837,2807120,2819389,2831645,2843888,2856117,2868333,2880535,2892725,2904901,2917064,2929214,2941352,2953476,2965587,2977685,2989770,3001843,3013903,3025950,3037984,3050006,3062015,3074011,3085995,3097967,3109926,3121872,3133806,3145728,3157637,3169535,3181420,3193292,3205153,3217002,3228838,3240662,3252475,3264275,3276064,3287840,3299605,3311358,3323099,3334828,3346546,3358252,3369946,3381628,3393299,3404959,3416607,3428243,3439868,3451482,3463084,3474675,3486255,3497823,3509380,3520926,3532461,3543984,3555497,3566998,3578488,3589967,3601436,3612893,3624339,3635775,3647199,3658613,3670016,3681408,3692790,3704160,3715520,3726870,3738209,3749537,3760854,3772161,3783458,3794744,3806020,3817285,3828540,3839784,3851019,3862242,3873456,3884659,3895853,3907035,3918208,3929371,3940523,3951666,3962798,3973921,3985033,3996136,4007228,4018311,4029383,4040446,4051499,4062542,4073575,4084599,4095613,4106617,4117612,4128596,4139572,4150537,4161493,4172440,4183377,4194304,4205222,4216130,4227029,4237919,4248799,4259670,4270532,4281384,4292227,4303061,4313885,4324700,4335506,4346303,4357091,4367870,4378639,4389400,4400151,4410893,4421627,4432351,4443066,4453773,4464470,4475159,4485839,4496510,4507172,4517825,4528469,4539105,4549732,4560350,4570960,4581561,4592153,4602737,4613312,4623878,4634436,4644985,4655526,4666058,4676582,4687097,4697604,4708102,4718592,4729074,4739547,4750012,4760468,4770916,4781356,4791788,4802211,4812627,4823033,4833432,4843823,4854205,4864580,4874946,4885304,4895654,4905996,4916330,4926656,4936974,4947284,4957586,4967880,4978166,4988444,4998714,5008977,5019231,5029478,5039717,5049948,5060171,5070387,5080595,5090795,5100987,5111172,5121349,5131518,5141680,5151834,5161980,5172119,5182250,5192374,5202490,5212599,5222700,5232794,5242880,5252959,5263030,5273094,5283150,5293199,5303241,5313275,5323302,5333322,5343334,5353340,5363337,5373328,5383311,5393287,5403256,5413218,5423172,5433119,5443059,5452992,5462918,5472837,5482749,5492653,5502551,5512441,5522325,5532201,5542070,5551933,5561788,5571637,5581478,5591313,5601141,5610962,5620775,5630583,5640383,5650176,5659963,5669742,5679515,5689281,5699041,5708793,5718539,5728278,5738011,5747737,5757456,5767168,5776874,5786573,5796265,5805951,5815630,5825303,5834969,5844628,5854281,5863928,5873568,5883201,5892828,5902448,5912062,5921669,5931270,5940865,5950453,5960035,5969610,5979179,5988742,5998298,6007848,6017391,6026929,6036460,6045984,6055503,6065015,6074521,6084020,6093513,6103001,6112482,6121956,6131425,6140887,6150343,6159794,6169238,6178675,6188107,6197533,6206952,6216366,6225773,6235174,6244570,6253959,6263342,6272719,6282091,6291456,6300815,6310169,6319516,6328857,6338193,6347523,6356846,6366164,6375476,6384782,6394082,6403377,6412665,6421948,6431225,6440496,6449761,6459021,6468275,6477523,6486765,6496001,6505232,6514457,6523676,6532890,6542098,6551300,6560497,6569688,6578873,6588053,6597227,6606395,6615558,6624716,6633867,6643013,6652154,6661289,6670418,6679542,6688661,6697774,6706881,6715983,6725079,6734170,6743256,6752336,6761410,6770479,6779543,6788601,6797654,6806702,6815744,6824781,6833812,6842838,6851859,6860874,6869884,6878889,6887888,6896883,6905871,6914855,6923833,6932806,6941774,6950736,6959694,6968646,6977593,6986534,6995471,7004402,7013328,7022249,7031165,7040075,7048981,7057881,7066776,7075666,7084551,7093431,7102306,7111176,7120040,7128900,7137754,7146604,7155448,7164287,7173122,7181951,7190776,7199595,7208409,7217219,7226023,7234823,7243617,7252407,7261191,7269971,7278746,7287516,7296280,7305041,7313796,7322546,7331291,7340032,7348768,7357499,7366225,7374946,7383662,7392374,7401080,7409782,7418480,7427172,7435860,7444542,7453220,7461894,7470562,7479226,7487885,7496540,7505189,7513834,7522475,7531110,7539741,7548367,7556989,7565606,7574218,7582826,7591429,7600027,7608621,7617210,7625794,7634374,7642950,7651520,7660087,7668648,7677205,7685758,7694306,7702849,7711388,7719922,7728452,7736977,7745498,7754014,7762526,7771033,7779536,7788035,7796529,7805018,7813503,7821984,7830460,7838931,7847399,7855862,7864320,7872774,7881224,7889669,7898110,7906546,7914979,7923406,7931830,7940249,7948664,7957074,7965480,7973882,7982280,7990673,7999062,8007446,8015826,8024203,8032574,8040942,8049305,8057664,8066019,8074369,8082715,8091057,8099395,8107729,8116058,8124383,8132704,8141021,8149334,8157642,8165946,8174247,8182543,8190834,8199122,8207405,8215685,8223960,8232231,8240498,8248761,8257020,8265275,8273525,8281772,8290014,8298253,8306487,8314717,8322943,8331166,8339384,8347598,8355808,8364014,8372216,8380414};

    static int[] tb_sqrt_tan = {8185,8169,8153,8137,8122,8106,8091,8075,8060,8045,8030,8015,8000,7985,7970,7955,7941,7927,7912,7898,7883,7869,7855,7841,7827,7813,7799,7785,7772,7758,7744,7731,7718,7704,7691,7678,7665,7652,7638,7626,7613,7600,7587,7574,7561,7549,7537,7525,7512,7500,7488,7475,7463,7451,7439,7427,7415,7403,7391,7380,7368,7357,7345,7333,7322,7310,7299,7288,7276,7266,7254,7243,7232,7221,7211,7199,7188,7178,7167,7156,7145,7135,7124,7114,7103,7093,7082,7072,7062,7052,7041,7032,7021,7011,7001,6991,6981,6972,6961,6952,6942,6932,6923,6913,6904,6894,6884,6875,6865,6856,6846,6837,6828,6818,6810,6800,6791,6782,6773,6764,6755,6746,6737,6728,6719,6711,6702,6693,6684,6676,6667,6658,6650,6641,6633,6624,6616,6608,6599,6591,6583,6574,6566,6558,6550,6541,6533,6525,6517,6509,6501,6493,6485,6477,6469,6461,6454,6446,6438,6430,6422,6415,6407,6399,6392,6384,6376,6369,6362,6354,6347,6339,6332,6324,6317,6310,6302,6295,6288,6281,6274,6266,6259,6252,6245,6238,6231,6224,6217,6210,6203,6196,6189,6182,6175,6168,6162,6155,6148,6141,6134,6128,6121,6114,6108,6101,6094,6088,6082,6075,6068,6062,6056,6049,6042,6036,6030,6024,6017,6011,6004,5998,5992,5986,5979,5973,5967,5961,5954,5948,5942,5936,5930,5924,5918,5912,5906,5900,5894,5888,5882,5876,5870,5864,5859,5853,5847,5841,5836,5830,5824,5818,5812,5807,5801,5795,5790,5784,5778,5773,5767,5762,5756,5750,5745,5740,5734,5728,5723,5718,5712,5707,5701,5696,5690,5685,5680,5674,5669,5664,5659,5654,5648,5643,5638,5632,5627,5622,5617,5612,5607,5602,5596,5591,5586,5581,5576,5571,5566,5561,5556,5551,5546,5541,5536,5531,5526,5522,5516,5512,5507,5502,5497,5492,5488,5483,5478,5473,5468,5464,5459,5454,5450,5445,5440,5435,5431,5426,5421,5417,5412,5408,5403,5398,5394,5389,5385,5380,5376,5371,5366,5362,5358,5353,5349,5344,5340,5335,5331,5326,5322,5318,5313,5309,5305,5300,5296,5292,5287,5283,5279,5274,5270,5266,5262,5258,5253,5249,5245,5241,5236,5232,5228,5224,5220,5216,5212,5208,5203,5199,5195,5191,5187,5183,5179,5175,5171,5167,5163,5159,5155,5151,5147,5143,5139,5135,5131,5127,5123,5119,5116,5112,5108,5104,5100,5096,5092,5088,5084,5081,5077,5073,5069,5066,5062,5058,5054,5050,5047,5043,5039,5036,5032,5028,5024,5021,5017,5013,5010,5006,5002,4999,4995,4992,4988,4984,4981,4977,4974,4970,4966,4963,4959,4956,4952,4949,4945,4942,4938,4934,4931,4928,4924,4921,4917,4914,4910,4907,4904,4900,4896,4893,4890,4886,4883,4880,4876,4873,4870,4866,4863,4860,4856,4853,4850,4846,4843,4840,4836,4833,4830,4826,4823,4820,4816,4813,4810,4807,4804,4800,4797,4794,4791,4788,4784,4781,4778,4775,4772,4768,4765,4762,4759,4756,4753,4750,4746,4744,4740,4737,4734,4731,4728,4725,4722,4719,4716,4713,4710,4706,4704,4700,4698,4694,4692,4688,4686,4682,4680,4676,4674,4670,4668,4665,4662,4659,4656,4653,4650,4647,4644,4641,4638,4636,4632,4630,4627,4624,4621,4618,4615,4612,4610,4607,4604,4601,4598,4595,4592,4590,4587,4584,4581,4578,4576,4573,4570,4567,4564,4562,4559,4556,4554,4551,4548,4545,4542,4540,4537,4534,4532,4529,4526,4524,4521,4518,4516,4513,4510,4508,4505,4502,4500,4497,4494,4492,4489,4486,4484,4481,4478,4476,4473,4471,4468,4466,4463,4460,4458,4455,4452,4450,4448,4445,4442,4440,4437,4435,4432,4430,4427,4424,4422,4420,4417,4414,4412,4410,4407,4404,4402,4400,4397,4395,4392,4390,4387,4385,4382,4380,4378,4375,4372,4370,4368,4365,4363,4360,4358,4356,4353,4351,4348,4346,4344,4341,4339,4336,4334,4332,4330,4327,4325,4322,4320,4318,4315,4313,4311,4308,4306,4304,4301,4299,4297,4294,4292,4290,4288,4285,4283,4281,4278,4276,4274,4272,4269,4267,4265,4262,4260,4258,4256,4254,4251,4249,4247,4244,4242,4240,4238,4236,4234,4231,4229,4227,4225,4222,4220,4218,4216,4214,4212,4210,4207,4205,4203,4201,4198,4196,4194,4192,4190,4188,4186,4184,4182,4179,4177,4175,4173,4171,4169,4167,4164,4162,4160,4158,4156,4154,4152,4150,4148,4146,4144,4142,4140,4138,4136,4134,4131,4129,4127,4125,4123,4121,4119,4117,4115,4113,4111,4109,4107,4105,4103,4101,4099,4097};

    public static float fsqrt(float a) {
        return FPUUtils.getFloat(
                fsqrt_uint32_t(FPUUtils.getUint32_t(a)));
    }

    public static int fsqrt_uint32_t(int a) {

        int intArray[] = FPUUtils.parse_float( a ); 
        int sign1 = intArray[0];
        int exp1  = intArray[1];
        int frac1 = intArray[2];

        if (exp1 == 0) {
            return FPUUtils.float_with( sign1, 0, 0 );  
        } else if ( sign1 == 1 ) {
            // 2 ** 22
            return FPUUtils.float_with( 1, 255, 4194304 );
        }

        int key = ( 0x800000 + frac1 ) >> 14;
        int comp;
        int exp;
        if ( exp1 % 2 == 0 ) {
            comp = ( frac1 & 0x3FFF) << 1;
            exp = ( exp1 - 126)/2 + 127;
        } else {
            key = key >> 1;
            comp = frac1 & 0x7FFF;
            exp = ( exp1 - 125 ) / 2 + 127;
        }

        key -= 256;

        int frac = tb_sqrt_val[key] << 2;
        comp = comp * (tb_sqrt_tan[key]);
        frac += comp >> 12;

        if ( frac % 4 == 3 || frac % 8 == 6 || ( frac % 4 == 2 && ( comp & 0xFFF ) != 0 )) frac += 4;

        return FPUUtils.float_with( 0, exp - 1, frac >> 2 );
    }

    public static boolean validCheck(float a) {
        float my_result = fsqrt(a);
        float result = (float) Math.sqrt((double)a);
        if (!is_valid_fsqrt(a, my_result)) {// !checkError(my_result, result)) {
            System.err.printf("error: fsqrt(%e) = %e, but %e\n",
                    a, result, my_result);
            System.err.printf("error: fsqrt(%08x) = %08x, but %08x\n",
                    FPUUtils.getUint32_t(a),
                    FPUUtils.getUint32_t(result), FPUUtils.getUint32_t(my_result));
        }
        return my_result == result;
    }

    public static boolean is_valid_fsqrt(float a, float my_result) {

        double my_fsqrt = (double)my_result;
        double n_sqrt   = Math.sqrt((double)a);

        return ( Double.isNaN( my_fsqrt ) &&
                Double.isNaN( n_sqrt ) ) ||
            Math.abs( my_fsqrt - n_sqrt ) < 
            FPUUtils.max_double( n_sqrt * Math.pow( 2, - 20 ), Math.pow( 2, -126 ) );
    } 
}
